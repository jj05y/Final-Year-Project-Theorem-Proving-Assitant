
options {
    MULTI = true;
    VISITOR = true;
    NODE_DEFAULT_VOID = true;
}

PARSER_BEGIN(Parser)
import java.util.Vector;

public class Parser{

    public static void main (String[] args) {

        Parser parser = new Parser(System.in);

        try {
            ASTExpr n = parser.Expr();
            ParserVisitor v = new ParserDumpVisitor();
            n.jjtAccept(v, null)
;            System.out.println("\nThanks a thousand.");
        } catch (Exception e) {
            System.out.println("Oops.");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}

PARSER_END(Parser)

TOKEN :
{
    <PLUS: "+">
    |<ID: (["a"-"z","A"-"Z"])+>
}

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}



//Expr ::= Sum
ASTExpr Expr() #Expr :
{}
{
    Sum()
    {return jjtThis;}
}

//Sum ::= Id Sum_P
void Sum() :
{}
{
   (Id() Sum_P()) #Plus
}

//Sum_P ::= <PLUS> Id Sum_P | e
void Sum_P() :
{}
{
    (Plus() Id() Sum_P()
    | {}) #Plus(>1)
}


//Plus ::= <PLUS>
void Plus() :
{}
{
    <PLUS>
}

//Id ::= <ID>
void Id() #Id :
{}
{
    <ID>
}





