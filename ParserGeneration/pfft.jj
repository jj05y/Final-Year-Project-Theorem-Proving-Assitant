/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. pfft.jj */
/*@egen*/
options {
                 
                   
                             
}

PARSER_BEGIN(Parser)
import java.util.Vector;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/

    public static void main (String[] args) {

        Parser parser = new Parser(System.in);

        try {
            ASTExpr n = parser.Expr();
            ParserVisitor v = new ParserDumpVisitor();
            n.jjtAccept(v, null)
;            System.out.println("\nThanks a thousand.");
        } catch (Exception e) {
            System.out.println("Oops.");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}

PARSER_END(Parser)

TOKEN :
{
    <PLUS: "+">
    |<ID: (["a"-"z","A"-"Z"])+>
}

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


/*
Expr ::= Sum
Sum ::= Id Sum_P
Sum_P ::= Plus Id Sum_P | e
id ::= <ID>
plus ::= <PLUS:=>


*/

//Expr ::= Sum
ASTExpr Expr()       :
{/*@bgen(jjtree) Expr */
  ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr */
    try {
/*@egen*/
    Sum()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//Sum ::= Id Sum_P
void Sum() :
{}
{/*@bgen(jjtree) Plus */
   {
     ASTPlus jjtn001 = new ASTPlus(JJTPLUS);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   ( Id() Sum_P())/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/      
}

//Sum_P ::= <PLUS> Id Sum_P | e
void Sum_P() :
{}
{/*@bgen(jjtree) #Plus(> 1) */
    {
      ASTPlus jjtn001 = new ASTPlus(JJTPLUS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (Plus() Id() Sum_P()
    |/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
        jjtc001 = false;
      }
/*@egen*/ {})/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/          
}


//Plus ::= <PLUS>
void Plus() :
{}
{
    <PLUS>
}

//Id ::= <ID>
void Id()     :
{/*@bgen(jjtree) Id */
  ASTId jjtn000 = new ASTId(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Id */
    try {
/*@egen*/
    <ID>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}





